@startuml
!include style.puml
skinparam ArrowFontStyle plain

box Logic LOGIC_COLOR_T1
participant ":LogicManager" as LogicManager LOGIC_COLOR
participant ":AddressBookParser" as AddressBookParser LOGIC_COLOR
participant ":EditTaskCommandParser" as EditTaskCommandParser LOGIC_COLOR
participant "e:EditTaskCommand" as EditTaskCommand LOGIC_COLOR
participant "r:CommandResult" as CommandResult LOGIC_COLOR
end box

box Model MODEL_COLOR_T1
participant "m:Model" as Model MODEL_COLOR
participant "g:Group" as Group MODEL_COLOR
participant "t:Task" as Task MODEL_COLOR
end box

[-> LogicManager : execute("edit_t_g gn/CS2103-F12-2 i/1 tn/Complete Assignment td/2024-12-12 1800")
activate LogicManager

LogicManager -> AddressBookParser : parseCommand("edit_t_g gn/CS2103-F12-2 i/1 tn/Complete Assignment td/2024-12-12 1800")
activate AddressBookParser

create EditTaskCommandParser
AddressBookParser -> EditTaskCommandParser : parse("gn/CS2103-F12-2 i/1 tn/Complete Assignment td/2024-12-12 1800")
activate EditTaskCommandParser

create EditTaskCommand
EditTaskCommandParser -> EditTaskCommand : parse("gn/CS2103 index/1 tn/Complete Assignment td/2024-12-12 1800")
activate EditTaskCommand

EditTaskCommand --> EditTaskCommandParser : e
deactivate EditTaskCommand

EditTaskCommandParser --> AddressBookParser : e
deactivate EditTaskCommandParser
'Hidden arrow to position the destroy marker below the end of the activation bar.
EditTaskCommandParser -[hidden]-> AddressBookParser
destroy EditTaskCommandParser

AddressBookParser --> LogicManager : e
deactivate AddressBookParser

LogicManager -> EditTaskCommand : execute(m)
activate EditTaskCommand

EditTaskCommand -> Model : getGroupByName("CS2103")
activate Model

Model --> EditTaskCommand : g
deactivate Model

EditTaskCommand -> Group : getTasks()
activate Group

Group --> EditTaskCommand : List<Task>
deactivate Group

EditTaskCommand -> Group : get task by index
Group --> EditTaskCommand : t

EditTaskCommand -> EditTaskCommand : create edited task with new details

EditTaskCommand -> Model : setTask(taskToEdit, editedTask, group)
EditTaskCommand -> Model : decreaseGroupWithTask(taskToEdit)

alt Task is new in global list
    EditTaskCommand -> Model : addTask(editedTask)
else Task exists in global list
    EditTaskCommand -> Model : increaseGroupWithTask(editedTask)
end

EditTaskCommand -> Model : updateFilteredGroupList(predicate)
EditTaskCommand -> Model : setMostRecentGroupTaskDisplay(groupName)

create CommandResult
EditTaskCommand -> CommandResult : new CommandResult(success message)
activate CommandResult

CommandResult --> EditTaskCommand
deactivate CommandResult
destroy CommandResult

EditTaskCommand --> LogicManager : r
deactivate EditTaskCommand
destroy EditTaskCommand

[<-- LogicManager
deactivate LogicManager
@enduml
